Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FOR
    HOLA
    HOLA_MUNDO
    MUNDO

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS expression
Rule 2     expression -> expression TIMES expression
Rule 3     expression -> LPAREN expression RPAREN
Rule 4     expression -> NUMBER

Terminals, with rules where they appear

FOR                  : 
HOLA                 : 
HOLA_MUNDO           : 
LPAREN               : 3
MUNDO                : 
NUMBER               : 4
PLUS                 : 1
RPAREN               : 3
TIMES                : 2
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 2 3 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression TIMES expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . NUMBER

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . TIMES expression

    PLUS            shift and go to state 4
    TIMES           shift and go to state 5


state 2

    (3) expression -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression TIMES expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . NUMBER

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    expression                     shift and go to state 6

state 3

    (4) expression -> NUMBER .

    PLUS            reduce using rule 4 (expression -> NUMBER .)
    TIMES           reduce using rule 4 (expression -> NUMBER .)
    $end            reduce using rule 4 (expression -> NUMBER .)
    RPAREN          reduce using rule 4 (expression -> NUMBER .)


state 4

    (1) expression -> expression PLUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression TIMES expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . NUMBER

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    expression                     shift and go to state 7

state 5

    (2) expression -> expression TIMES . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression TIMES expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . NUMBER

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    expression                     shift and go to state 8

state 6

    (3) expression -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . TIMES expression

    RPAREN          shift and go to state 9
    PLUS            shift and go to state 4
    TIMES           shift and go to state 5


state 7

    (1) expression -> expression PLUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . TIMES expression

    PLUS            reduce using rule 1 (expression -> expression PLUS expression .)
    $end            reduce using rule 1 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 5

  ! TIMES           [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 4 ]


state 8

    (2) expression -> expression TIMES expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . TIMES expression

    PLUS            reduce using rule 2 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 2 (expression -> expression TIMES expression .)
    $end            reduce using rule 2 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 2 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 4 ]
  ! TIMES           [ shift and go to state 5 ]


state 9

    (3) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 3 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 3 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 3 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 3 (expression -> LPAREN expression RPAREN .)

